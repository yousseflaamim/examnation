# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: project CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Inject the set-secret job here
        set-secret:
         name: Create or update environment secret
        runs-on: ubuntu-latest
        steps:
          - name: Install tweetsodium
            run: |
              npm install tweetsodium
          - uses: Simran-B/github-script@master # has updated dependencies (for testing only!)
            id: update-secret
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }} # Personal access token required
              # (also for retrieving the env public key, despite what the documentation claims)
              script: |
                const sodium = require('tweetsodium')

                const envName = "prod"
                const secretName = "MY_SECRET"
                const value = "New secret value"

                const pkey = await github.rest.actions.getEnvironmentPublicKey({
                  repository_id: context.payload.repository.id,
                  environment_name: envName,
                })

                const messageBytes = Buffer.from(value)
                const keyBytes = Buffer.from(pkey.data.key, "base64")
                const encryptedBytes = sodium.seal(messageBytes, keyBytes)
                const encrypted = Buffer.from(encryptedBytes).toString("base64")

                const result = await github.rest.actions.createOrUpdateEnvironmentSecret({
                  repository_id: context.payload.repository.id,
                  environment_name: envName,
                  secret_name: secretName,
                  encrypted_value: encrypted,
                  key_id: pkey.data.key_id,
                })
                console.log(result.status)

